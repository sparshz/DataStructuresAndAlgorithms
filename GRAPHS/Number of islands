class Solution {
private:
    void dfs(vector<vector<char>>&grid , vector<vector<int>>&vis,int i,int j){
        int n = grid.size();
        int m = grid[0].size();
        vis[i][j] = 1;
        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};
        for(int k=0;k<4;k++)
        {
            int nr = i + drow[k];
            int nc = j + dcol[k];
            if(nr >= 0 && nr < n && nc >=0 && nc <m && grid[nr][nc] =='1' && !vis[nr][nc]){
                dfs(grid,vis,nr,nc);
            }
        }
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>>vis(n,vector<int>(m,0));
        int cnt = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid[i][j] == '1'){
                    cnt++;
                    dfs(grid,vis,i,j);
                }
            }
        }

        return cnt;
        
    }
};
