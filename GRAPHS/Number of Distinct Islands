

class Solution {
  private:
    void dfs(int row , int col , vector<vector<int>>& grid , vector<vector<int>>& visited , vector<pair<int,int>>&v,int row0,int col0){
        visited[row][col] = 1;
        v.push_back({row - row0 , col - col0});
        int n = grid.size();
        int m = grid[0].size();
        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};
        for(int i=0;i<4;i++){
            int nr = row + drow[i];
            int nc = col + dcol[i];
            if(nr >=0 && nc >=0 && nr <n && nc <m && !visited[nr][nc] && grid[nr][nc]==1){
                dfs(nr,nc , grid,visited , v, row0,col0);
            }
        }
        
    }
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        
        vector<vector<int>>visited(n,vector<int>(m,0));
        set<vector<pair<int,int>>>s;
        
        for(int i=0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(!visited[i][j] && grid[i][j]==1){
                    vector<pair<int,int>>v;
                    dfs(i,j,grid , visited , v,i,j);
                    s.insert(v);
                    
                }
            }
        }
        
        int ans = s.size();
        return ans;
    }

};
